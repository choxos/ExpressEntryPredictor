# Generated by Django 5.0.7 on 2025-08-02 10:50

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DrawCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("code", models.CharField(max_length=20, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Draw Category",
                "verbose_name_plural": "Draw Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="EconomicIndicator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("unemployment_rate", models.FloatField(blank=True, null=True)),
                ("job_vacancy_rate", models.FloatField(blank=True, null=True)),
                ("gdp_growth", models.FloatField(blank=True, null=True)),
                ("immigration_target", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-date"],
                "unique_together": {("date",)},
            },
        ),
        migrations.CreateModel(
            name="ExpressEntryDraw",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("round_number", models.IntegerField(unique=True)),
                ("date", models.DateField()),
                (
                    "invitations_issued",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                (
                    "lowest_crs_score",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1200),
                        ]
                    ),
                ),
                ("url", models.URLField(blank=True, null=True)),
                ("days_since_last_draw", models.IntegerField(blank=True, null=True)),
                ("is_weekend", models.BooleanField(default=False)),
                ("is_holiday", models.BooleanField(default=False)),
                (
                    "month",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ]
                    ),
                ),
                (
                    "quarter",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(4),
                        ]
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="predictor.drawcategory",
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
                "unique_together": {("date", "category")},
            },
        ),
        migrations.CreateModel(
            name="PredictionModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "model_type",
                    models.CharField(
                        choices=[
                            ("ARIMA", "ARIMA Time Series"),
                            ("RF", "Random Forest"),
                            ("XGB", "XGBoost"),
                            ("LSTM", "Long Short-Term Memory"),
                            ("LR", "Linear Regression"),
                            ("ENSEMBLE", "Ensemble Model"),
                        ],
                        max_length=20,
                    ),
                ),
                ("version", models.CharField(default="1.0", max_length=20)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "mae_score",
                    models.FloatField(
                        blank=True,
                        help_text="Mean Absolute Error for CRS Score",
                        null=True,
                    ),
                ),
                (
                    "mse_score",
                    models.FloatField(
                        blank=True,
                        help_text="Mean Squared Error for CRS Score",
                        null=True,
                    ),
                ),
                (
                    "r2_score",
                    models.FloatField(
                        blank=True, help_text="RÂ² Score for CRS Score", null=True
                    ),
                ),
                (
                    "date_accuracy",
                    models.FloatField(
                        blank=True, help_text="Date prediction accuracy (%)", null=True
                    ),
                ),
                ("parameters", models.JSONField(blank=True, default=dict)),
                ("feature_importance", models.JSONField(blank=True, default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("trained_on", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-created_at"],
                "unique_together": {("name", "version")},
            },
        ),
        migrations.CreateModel(
            name="DrawPrediction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("predicted_date", models.DateField()),
                (
                    "predicted_crs_score",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1200),
                        ]
                    ),
                ),
                (
                    "predicted_invitations",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "date_confidence",
                    models.FloatField(
                        help_text="Confidence percentage for date prediction",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "score_confidence",
                    models.FloatField(
                        help_text="Confidence percentage for CRS score prediction",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("crs_score_lower", models.IntegerField(blank=True, null=True)),
                ("crs_score_upper", models.IntegerField(blank=True, null=True)),
                ("date_range_start", models.DateField(blank=True, null=True)),
                ("date_range_end", models.DateField(blank=True, null=True)),
                ("prediction_date", models.DateTimeField(auto_now_add=True)),
                ("is_published", models.BooleanField(default=False)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="predictor.drawcategory",
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="predictor.predictionmodel",
                    ),
                ),
            ],
            options={
                "ordering": ["predicted_date"],
                "unique_together": {("category", "model", "predicted_date")},
            },
        ),
        migrations.CreateModel(
            name="PredictionAccuracy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_error_days",
                    models.IntegerField(
                        help_text="Days difference between predicted and actual date"
                    ),
                ),
                (
                    "score_error",
                    models.IntegerField(
                        help_text="CRS score difference between predicted and actual"
                    ),
                ),
                (
                    "date_accuracy_score",
                    models.FloatField(help_text="Date prediction accuracy (0-100)"),
                ),
                (
                    "score_accuracy_score",
                    models.FloatField(
                        help_text="CRS score prediction accuracy (0-100)"
                    ),
                ),
                ("evaluated_on", models.DateTimeField(auto_now_add=True)),
                (
                    "actual_draw",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="predictor.expressentrydraw",
                    ),
                ),
                (
                    "prediction",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="predictor.drawprediction",
                    ),
                ),
            ],
            options={
                "unique_together": {("prediction", "actual_draw")},
            },
        ),
    ]
